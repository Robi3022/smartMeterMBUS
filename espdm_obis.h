/*
 * Data types as per specification
 */
#define OBISCODE_SIZE 	6U



enum DataType
{
    NullData = 0x00,
    Boolean = 0x03,
    BitString = 0x04,
    DoubleLong = 0x05,
    DoubleLongUnsigned = 0x06,
    OctetString = 0x09,
    VisibleString = 0x0A,
    Utf8String = 0x0C,
    BinaryCodedDecimal = 0x0D,
    Integer = 0x0F,
    Long = 0x10,
    Unsigned = 0x11,
    LongUnsigned = 0x12,
    Long64 = 0x14,
    Long64Unsigned = 0x15,
    Enum = 0x16,
    Float32 = 0x17,
    Float64 = 0x18,
    DateTime = 0x19,
    Date = 0x1A,
    Time = 0x1B,

    Array = 0x01,
    Structure = 0x02,
    CompactArray = 0x13
};


enum Accuracy
{
    SingleDigit = 0xFF,
    DoubleDigit = 0xFE
};

typedef struct
{
	uint8_t obisCode[OBISCODE_SIZE];
	const char* strOut;
} decodeData_t;


/*
 * Data structure
 */

static const int DECODER_START_OFFSET = 20; // Offset for start of OBIS decoding, skip header, timestamp and break block

static const int OBIS_TYPE_OFFSET = 0;
static const int OBIS_LENGTH_OFFSET = 1;

static const int OBIS_CODE_OFFSET = 2;

#define OBIS_CODE_LEN 	6

/*
 * Decode Data table
 */
const decodeData_t decodeSettings[] = {
		{{0x00,	0x00, 0x01, 0x00, 0x00, 0xFF},  "Timestamp"					},
		{{0x00, 0x00, 0x60, 0x01, 0x00, 0xFF},  "Serial-Number"				},
		{{0x00, 0x00, 0x2A, 0x00, 0x00, 0xFF},  "Device-Name" 				},
		{{0x01, 0x00, 0x20, 0x07, 0x00, 0xFF},  "VoltageL1"					},
		{{0x01, 0x00, 0x34, 0x07, 0x00, 0xFF},  "VoltageL2"					},
		{{0x01, 0x00, 0x48, 0x07, 0x00, 0xFF},  "VoltageL3"					},
		{{0x01, 0x00, 0x1F, 0x07, 0x00, 0xFF},  "CurrentL1"					},
		{{0x01, 0x00, 0x33, 0x07, 0x00, 0xFF},  "CurrentL2"		 			},
		{{0x01, 0x00, 0x47, 0x07, 0x00, 0xFF},  "CurrentL3"		 			},
		{{0x01, 0x00, 0x01, 0x07, 0x00, 0xFF},  "ActivePowerPlus" 			},
		{{0x01, 0x00, 0x02, 0x07, 0x00, 0xFF},  "ActivePowerMinus"			},
		{{0x01, 0x00, 0x01, 0x08, 0x00, 0xFF},  "ActiveEnergyPlus"			},
		{{0x01, 0x00, 0x02, 0x08, 0x00, 0xFF},  "ActiveEnergyMinus"			},
		{{0x01, 0x00, 0x03, 0x08, 0x00, 0xFF},  "ReactiveEnergyPlus"		},
		{{0x01, 0x00, 0x04, 0x08, 0x00, 0xFF},  "ReactiveEnergyMinus"		}
};
#define DECODE_TAB_LEN 		(sizeof(decodeSettings) / sizeof(decodeData_t))


